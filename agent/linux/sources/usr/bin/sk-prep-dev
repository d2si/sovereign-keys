#!/bin/bash

# Copyright 2022 Devoteam Revolve (D2SI SAS)
# This file is part of `Sovereign Keys`.
#
# `Sovereign Keys` is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# `Sovereign Keys` is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with `Sovereign Keys`. If not, see <http://www.gnu.org/licenses/>.

# TODO
# - Control openssl version >= 1.0
# - Add retry mechanic when querying the API

# Load commons constants and functions
. /usr/lib/sovereign-keys/commons.sh

usage () {
    echo "Usage: $0 [<OPTIONS>] /dev/<device_name>"
    echo ""
    echo "Sovereign Keys volume device preparation"
    echo "Takes a raw block device and configure it to be protected by the Sovereign Keys system"
    echo ""
    echo "OPTIONS:"
    echo -e "-h|--help\t\t\tShow this help"
    echo -e "-f|--filesystem <FS>\t\tChoose the filesystem to create on the encrypted data partition. One of xfs|ext2|ext3|ext4|fat|vfat. Defaults to xfs"
    echo -e "-a|--automount <mount_point>\tWill register this device to be automounted at instance startup on <mount_point>"
    echo -e "--ignore-nitro-check\t\tBy default, Sovereign Keys require to be on a Nitro-based instance. This flag allows to ignore this prerequisite"
    echo -e "--delete-all-existing-data\tForce the preparation process and DELETE all existing volume data (be sure that's what you want)"

}

cleanup () {
    echo "Cleaning up..."
    umount_secret_store
    umount_ram_fs
}

if ! is_user_root ; then
    echo "MUST be run as root"
    exit 5
fi

# Default filesystem is xfs
FILESYSTEM=xfs
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -h|--help)
            usage
            exit 0
        ;;
        -f|--filesystem)
            FILESYSTEM="$2"
            shift # past argument
            shift # past value
        ;;
        -a|--automount)
            MOUNT_POINT="$2"
            shift # past argument
            shift # past value
        ;;
        --ignore-nitro-check)
            IGNORE_NITRO_CHECK=YES
            shift # past argument
        ;;
        --delete-all-existing-data)
            DELETE_ALL_EXISTING_DATA=YES
            shift # past argument
        ;;
        *)    # unknown option
            POSITIONAL+=("$1") # save it in an array for later
            shift # past argument
        ;;
    esac
done

# Filesystem must be in the acceptable list
if ! [[ $FILESYSTEM =~ ^(xfs|ext2|ext3|ext4|fat|vfat)$ ]] ; then
    echo "Invalid value for filesystem"
    usage
    exit 2
fi

# Test nitro
if ! is_nitro ; then
    echo "This EC2 instance is not a Nitro-based instance. Sovereign Keys security depends on Nitro !!"
    if [ -n "$IGNORE_NITRO_CHECK" ] ; then
        echo "--ignore-nitro-check was set ; volume preparation will continue"
    else
        echo "You can use '--ignore-nitro-check' to ignore this warning. Exiting."
        exit 3
    fi
fi

# Should only have 1 positional argument
if [ ${#POSITIONAL[@]} -ne 1 ] ; then
    echo "Exactly one device is expected as argument"
    usage
    exit 2
fi

# Argument should be a volume /dev/something
DEVICE="${POSITIONAL[0]}"
if [ ! -b $DEVICE ] ; then
    echo "$DEVICE is not a block device"
    usage
    exit 2
fi

# The volume should not have any partition
if ls ${DEVICE}?* &>/dev/null && [ -z $DELETE_ALL_EXISTING_DATA ]; then
    echo "$DEVICE already have partitions. Sovereign Keys can only prepare empty volumes."
    echo "If you are SURE you want to ERASE ALL EXISTING DATA, you can use the '--delete-all-existing-data' flag"
    exit 4
fi

# Prepare partitions of the new volume
# Format GPT
log "Create a new GPT partition table on $DEVICE..."
sgdisk -o $DEVICE >/dev/null
if [ $? -eq 0 ] ; then echo "OK" ; else echo "NOK" ; exit 1 ; fi

# Create the secret store partition
log "Create Secret Store partition on $DEVICE..."
START=$(sgdisk -F $DEVICE)
SIZE=2048 # 2048 sectors of 512 bytes => 1 MB
END=$(($START + $SIZE - 1))
sgdisk -n 128:$START:$END -c 128:"Secret Store" -A 128:set:125 $DEVICE >/dev/null
if [ $? -eq 0 ] ; then echo "OK" ; else echo "NOK" ; exit 1 ; fi

# Create the main partition
log "Create data partition on $DEVICE..."
START=$(sgdisk -F $DEVICE)
END=$(sgdisk -E $DEVICE)
sgdisk -n 1:$START:$END -c 1:"Data" -A 128:set:63 $DEVICE >/dev/null
if [ $? -eq 0 ] ; then echo "OK" ; else echo "NOK" ; exit 1 ; fi

# Create the Secret Store FS
SECRET_PARTITION_DEVICE=${DEVICE}128
while [ ! -b $SECRET_PARTITION_DEVICE ] ; do sleep 1 ; done
log "Formating Secret Store partition..."
mkfs.fat $SECRET_PARTITION_DEVICE >/dev/null
if [ $? -eq 0 ] ; then echo "OK" ; else echo "NOK" ; exit 1 ; fi

# Create the working space RAM disk
mount_ram_fs
if [ $? -ne 0 ] ; then echo "ERROR while creating the ram FS!!" ; exit 1 ; fi
# Mount the Secret Store FS
mount_secret_store $SECRET_PARTITION_DEVICE
if [ $? -ne 0 ] ; then echo "ERROR while mounting the secret store!!" ; cleanup ; exit 1 ; fi

# Generate a new secret
# Extract the volume UUID
VOLUME_UUID=$(get_device_guid $DEVICE)
# Get a RSA public key
PUB_KEY=$(get_rsa_pub_key)
echo "Ephemeral RSA public key: $PUB_KEY"
# Ask for a new secret
log "Asking Revolve Sovereign Key API for a new secret..."
RES=$(curl -sf -H "Authorization: Custom" -H "Content-Type: application/json" -X POST -d "{\"rsa_wrapping_key\": \"$PUB_KEY\", \"volume_uuid\": \"$VOLUME_UUID\"}" $BASE_URL/encryption/$INSTANCE_ID/generate-secret)
if [ $? -eq 0 ] ; then echo "OK" ; else echo "NOK" ; cleanup ; exit 1 ; fi
# Control signatures
log "Verifying the signature of the encrypted version of the secret..."
if ! verify_signature $(echo $RES | jq -r .encrypted_secret) $(echo $RES | jq -r .encrypted_secret_signature) ; then
    echo "CRITICAL: Encrypted secret has not be created by the Revolve API"
    cleanup
    exit 1
else
    echo "OK"
fi
log "Verifying the signature of the wrapped version of the secret..."
if ! verify_signature $(echo $RES | jq -r .wrapped_secret) $(echo $RES | jq -r .wrapped_secret_signature) ; then
    echo "CRITICAL: Wrapped secret has not be created by the Revolve API"
    cleanup
    exit 1
else
    echo "OK"
fi

# Store the encrypted secret
log "Storing the encrypted version of the secret..."
store_encrypted_secret $(echo $RES | jq -r .encrypted_secret)
if [ $? -eq 0 ] ; then echo "OK" ; else echo "NOK" ; cleanup ; exit 1 ; fi
# Unwrap the wraped secret
log "Unwrapping the wrapped version of the secret..."
unwrap_secret $(echo $RES | jq -r .wrapped_secret)
if [ $? -eq 0 ] ; then echo "OK" ; else echo "NOK" ; cleanup ; exit 1 ; fi

# Prepare the crypto volume
log "Creating the encrypted partition with an $FILESYSTEM filesystem..."
PARTITION_DEVICE=${DEVICE}1
prepare_crypto_volume $FILESYSTEM $PARTITION_DEVICE
if [ $? -eq 0 ] ; then echo "OK" ; else echo "NOK" ; cleanup ; exit 1 ; fi

# Putting the device in the automount list and mounting it unless the no-automount flag was set
if [ -n "$MOUNT_POINT" ] ; then
    log "Adding $DEVICE to the list of auto-mounted Sovereign Keys devices..."
    add_automount $DEVICE $MOUNT_POINT
    if [ $? -eq 0 ] ; then echo "OK" ; else echo "NOK" ; fi
    log "Mounting the encrypted data volume..."
    mount_crypto_volume $PARTITION_DEVICE $MOUNT_POINT
    if [ $? -eq 0 ] ; then echo "OK" ; else echo "NOK" ; fi
fi

# Unmounting everything
cleanup

echo "Success"
exit 0
